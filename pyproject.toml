[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.poetry]
authors = ["Daniil Maltsev <danil.zlatoust9999@gmail.com>"]
description = ""
name = "my-site"
readme = "README.md"
version = "0.1.0"

[tool.poetry.dependencies]
fastapi = "^0.105.0"
python = "^3.12"

[tool.poetry.group.dev.dependencies]
black = "^23.12.0"
mypy = "^1.7.1"
pymarkdownlnt = "^0.9.15"
pytest = "^7.4.3"
pytest-deadfixtures = "^2.2.1"
ruff = "^0.1.8"
toml-sort = "^0.23.1"

[tool.ruff]
ignore = [
    "A001",  # variable `{}` is shadowing a Python builtin
    "A002",  # argument `{}` is shadowing a Python builtin
    "A003",  # class attribute `{}` is shadowing a Python builtin
    "ANN001",  # missing type annotation for function argument `{}`
    "ANN002",  # missing type annotation for `{}`
    "ANN003",  # missing type annotation for `{}`
    "ANN101",  # missing type annotation for `self` in method
    "ANN102",  # missing type annotation for `cls` in classmethod
    "ANN201",  # missing return type annotation for public function `{}`
    "ANN202",  # missing return type annotation for private function `{}`
    "ANN204",  # missing return type annotation for special method `{}`
    "ANN206",  # missing return type annotation for class method `{}`
    "ANN401",  # dynamically typed expressions (typing.Any) are disallowed in `{}`
    "ARG001",  # unused function argument: `{}`
    "ARG002",  # unused method argument: `{}`
    "ARG005",  # unused lambda argument: `{}`
    "B018",  # found useless expression. Either assign it to a variable or remove it
    "B904",  # within an `except` clause, raise exceptions with [...]
    "C408",  # unnecessary `dict` call (rewrite as a literal)
    "COM812",  # trailing comma missing
    "COM819",  # trailing comma prohibited
    "D100",  # missing docstring in public module
    "D101",  # missing docstring in public class
    "D102",  # missing docstring in public method
    "D103",  # missing docstring in public function
    "D104",  # missing docstring in public package
    "D105",  # missing docstring in magic method
    "D106",  # missing docstring in public nested class
    "D107",  # missing docstring in `__init__`
    "D200",  # one-line docstring should fit on one line
    "D202",  # no blank lines allowed after function docstring (found {})
    "D203",  # 1 blank line required before class docstring
    "D205",  # 1 blank line required between summary line and description
    "D209",  # multi-line docstring closing quotes should be on a separate line
    "D212",  # multi-line docstring summary should start at the first line
    "D213",  # multi-line docstring summary should start at the second line
    "D400",  # first line should end with a period
    "D401",  # first line of docstring should be in imperative mood: "{}"
    "D404",  # first word of the docstring should not be "This"
    "D415",  # first line should end with a period, question mark, or exclamation point
    "E501",  # line too long ({} > {})
    "EM101",  # exception must not use a string literal, assign to variable first
    "EM102",  # expection must not use an f-string literal, assign to variable first
    "FBT001",  # boolean-typed position argument in function definition
    "FBT002",  # boolean default position argument in function definition
    "FBT003",  # boolean positional value in function call
    "INP001",  # file `{}` is part of an implicit namespace package. Add an `__init__.py`
    "INT001",  # f-string is resolved before function call; consider `_("string %s") % arg`
    "ISC001",  # implicitly concatenated string literals on one line
    "N802",  # function name `{}` should be lowercase
    "N803",  # argument name `{}` should be lowercase
    "N804",  # first argument of a class method should be named `cls`
    "N806",  # variable `{}` in function should be lowercase
    "N812",  # lowercase `{}` imported as non-lowercase `{}`
    "N818",  # exception name `{}` should be named with an Error suffix
    "N999",  # invalid module name: '{}'
    "PERF401",  # use a list comprehension to create a transformed list
    "PGH003",  # use specific rule codes when ignoring type issues
    "PGH004",  # use specific rule codes when using `noqa`
    "PLR0913",  # too many arguments in function definition ({} > {})
    "PLR2004",  # magic value used in comparison, consider replacing {} with constant variable
    "PLR5501",  # use `elif` instead of `else` then `if` to reduce indentation
    "PLW0603",  # using the global statement to update `{}` is discouraged
    "PLW2901",  # `for` loop variable `{}` overwritten by assignment target
    "PT001",  # use `@pytest.fixture()` over `@pytest.fixture`
    "PTH118",  # `os.path.join()` should be replaced by `Path` with `/` operator
    "PTH119",  # `os.path.basename()` should be replaced by `Path.name`
    "PTH120",  # `os.path.dirname()` should be replaced by `Path.parent`
    "PTH122",  # `os.path.splitext()` should be replaced by `Path.suffix`, [...]
    "PTH123",  # `open()` should be replaced by `Path.open()`
    "Q000",  # single quotes found but double quotes preferred
    "RET501",  # do not explicitly `return None` in function if it is the only possible return value
    "RET502",  # do not implicitly `return None` in function able to return non-`None` value
    "RET503",  # missing explicit `return` at the end of function able to return non-`None` value
    "RET505",  # unnecessary `else` after `return` statement
    "RSE102",  # unnecessary parentheses on raised exception
    "RUF001",  # string contains ambiguous `{}` [...]
    "RUF002",  # docstring contains ambiguous `{}` [...]
    "RUF005",  # consider iterable unpacking instead of concatenation"
    "RUF009",  # do not perform function call `{}` in dataclass defaults
    "RUF012",  # mutable class attributes should be annotated with `typing.ClassVar`
    "RUF100",  # unused `noqa` directive (unknown: `{}`)
    "S101",  # use of `assert` detected
    "S105",  # possible hardcoded password assigned to: "{}"
    "S105",  # possible hardcoded password assigned to: "{}"
    "S106",  # possible hardcoded password assigned to argument: "{}"
    "S311",  # standart pseudo-random generators are not suitable for cryptographic purposes
    "SIM102",  # use a single `if` statement instead of nested `if` statements
    "SIM108",  # use ternary operator `{}` instead of `if`-`else`-block
    "SIM300",  # yoda conditions are discouraged, use `{}` instead
    "SLF001",  # private member accessed: `{}`
    "TCH001",  # move application import `{}` into a type-checking block
    "TRY003",  # avoid specifying long messages outside the exception class
    "TRY200",  # use `raise from` to specify exception cause
    "TRY300",  # consider moving this statement to an `else` block
    "UP006",  # use `{}` instead of `{}` for type annotation
    "UP015",  # unnecessary open mode parameters
    "UP017",  # use `datetime.UTC` alias
    "UP035",  # `{}` is deprecated, use `{}` instead
]
line-length = 160
select = ["ALL"]
target-version = "py312"

[tool.ruff.isort]
known-local-folder = ["apps", "core"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.tomlsort]
all = true
in_place = true
sort_first = ["tool.poetry"]
spaces_before_inline_comment = 2
spaces_indent_inline_array = 4
trailing_comma_inline_array = true
